require 'octokit'
require 'semantic'

default_platform :android

REPO_NAME = 'quiltt/quiltt-android'.freeze
GITHUB_TOKEN = ENV['GITHUB_TOKEN']
SDK_VERSION_FILE_PATH = "../connector/src/main/java/app/quiltt/connector/QuilttSdkVersion.kt"

def release(new_version)
  new_branch = "release/#{new_version}"
  push_to_git_remote(new_branch)

  set_github_release(
    repository_name: REPO_NAME,
    api_token: GITHUB_TOKEN,
    name: new_version.to_s,
    tag_name: new_version.to_s,
    is_generate_release_notes: true,
    commitish: 'main'
  )

  create_pull_request(
    repo: REPO_NAME,
    api_token: GITHUB_TOKEN,
    title: "Release #{new_version}",
    head: new_branch,
    base: 'main'
  )
end

def bump_version_file(level)
  client = ::Octokit::Client.new(access_token: GITHUB_TOKEN)
  latest_release = client.latest_release(REPO_NAME)

  current_version = Semantic::Version.new(latest_release.tag_name)
  new_version = current_version.increment!(level).to_s

  # Increment version in connector.build.gradle.kts
  generate_new_connector_build_gradle(new_version)
  # Increment version in SDK_VERSION_FILE_PATH to send to Quiltt connector url
  generate_release_version_file(new_version)
  new_version
end

def generate_new_connector_build_gradle(new_version)
  connector_build_gradle = File.read('../connector/build.gradle.kts')
  new_connector_build_gradle = connector_build_gradle.gsub(
    /version = "(\d+.\d+.\d+)"/,
    "version = \"#{new_version}\""
  )
  File.write('../connector/build.gradle.kts', new_connector_build_gradle)
end

def generate_release_version_file(version)
  sh("echo \"package app.quiltt.connector\nval quilttSdkVersion = \\\"#{version}\\\"\" > #{SDK_VERSION_FILE_PATH}")
end

def push_to_git_remote(branch)
  sh("git checkout -b #{branch}")
  sh("git add #{SDK_VERSION_FILE_PATH}")
  sh('git commit -m "Bump version"')
  sh("git push origin #{branch}")
end

platform :android do
  desc 'Release patch version'
  lane :release_patch do
    new_version = bump_version_file(:patch)
    build_example_app
    # # test_example_app
    release(:patch)
  end

  desc 'Release minor version'
  lane :release_minor do
    new_version = bump_version_file(:minor)
    build_example_app
    # test_example_app
    release(:minor)
  end

  desc 'Release major version'
  lane :release_major do
    new_version = bump_version_file(:major)
    build_example_app
    # test_example_app
    release(:major)
  end

  desc 'Build Example App'
  lane :build_example_app do
    gradle(task: 'clean assembleRelease')
  end
end
